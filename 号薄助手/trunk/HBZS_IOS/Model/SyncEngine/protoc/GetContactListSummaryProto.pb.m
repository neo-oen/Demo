// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "GetContactListSummaryProto.pb.h"

@implementation GetContactListSummaryProtoRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [GetContactListSummaryProtoRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface ContactListSummaryResponse ()
@property (retain) NSMutableArray* mutableContactSummaryList;
@property (retain) NSMutableArray* mutableGroupSummaryList;
@property int32_t contactListVersion;
@property (retain) NSMutableArray* mutableContactVersionList;
@property (retain) NSMutableArray* mutableGroupVersionList;
@property int32_t businessCardVersion;
@end

@implementation ContactListSummaryResponse

@synthesize mutableContactSummaryList;
@synthesize mutableGroupSummaryList;
- (BOOL) hasContactListVersion {
  return !!hasContactListVersion_;
}
- (void) setHasContactListVersion:(BOOL) value {
  hasContactListVersion_ = !!value;
}
@synthesize contactListVersion;
@synthesize mutableContactVersionList;
@synthesize mutableGroupVersionList;
- (BOOL) hasBusinessCardVersion {
  return !!hasBusinessCardVersion_;
}
- (void) setHasBusinessCardVersion:(BOOL) value {
  hasBusinessCardVersion_ = !!value;
}
@synthesize businessCardVersion;
- (void) dealloc {
  self.mutableContactSummaryList = nil;
  self.mutableGroupSummaryList = nil;
  self.mutableContactVersionList = nil;
  self.mutableGroupVersionList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.contactListVersion = 0;
    self.businessCardVersion = 0;
  }
  return self;
}
static ContactListSummaryResponse* defaultContactListSummaryResponseInstance = nil;
+ (void) initialize {
  if (self == [ContactListSummaryResponse class]) {
    defaultContactListSummaryResponseInstance = [[ContactListSummaryResponse alloc] init];
  }
}
+ (ContactListSummaryResponse*) defaultInstance {
  return defaultContactListSummaryResponseInstance;
}
- (ContactListSummaryResponse*) defaultInstance {
  return defaultContactListSummaryResponseInstance;
}
- (NSArray*) contactSummaryList {
  return mutableContactSummaryList;
}
- (int32_t) contactSummaryAtIndex:(int32_t) index {
  id value = [mutableContactSummaryList objectAtIndex:index];
  return [value intValue];
}
- (NSArray*) groupSummaryList {
  return mutableGroupSummaryList;
}
- (int32_t) groupSummaryAtIndex:(int32_t) index {
  id value = [mutableGroupSummaryList objectAtIndex:index];
  return [value intValue];
}
- (NSArray*) contactVersionList {
  return mutableContactVersionList;
}
- (int32_t) contactVersionAtIndex:(int32_t) index {
  id value = [mutableContactVersionList objectAtIndex:index];
  return [value intValue];
}
- (NSArray*) groupVersionList {
  return mutableGroupVersionList;
}
- (int32_t) groupVersionAtIndex:(int32_t) index {
  id value = [mutableGroupVersionList objectAtIndex:index];
  return [value intValue];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.mutableContactSummaryList.count > 0) {
    [output writeRawVarint32:10];
    [output writeRawVarint32:contactSummaryMemoizedSerializedSize];
  }
  for (NSNumber* value in self.mutableContactSummaryList) {
    [output writeInt32NoTag:[value intValue]];
  }
  if (self.mutableGroupSummaryList.count > 0) {
    [output writeRawVarint32:18];
    [output writeRawVarint32:groupSummaryMemoizedSerializedSize];
  }
  for (NSNumber* value in self.mutableGroupSummaryList) {
    [output writeInt32NoTag:[value intValue]];
  }
  if (self.hasContactListVersion) {
    [output writeInt32:3 value:self.contactListVersion];
  }
  if (self.mutableContactVersionList.count > 0) {
    [output writeRawVarint32:34];
    [output writeRawVarint32:contactVersionMemoizedSerializedSize];
  }
  for (NSNumber* value in self.mutableContactVersionList) {
    [output writeInt32NoTag:[value intValue]];
  }
  if (self.mutableGroupVersionList.count > 0) {
    [output writeRawVarint32:42];
    [output writeRawVarint32:groupVersionMemoizedSerializedSize];
  }
  for (NSNumber* value in self.mutableGroupVersionList) {
    [output writeInt32NoTag:[value intValue]];
  }
  if (self.hasBusinessCardVersion) {
    [output writeInt32:6 value:self.businessCardVersion];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutableContactSummaryList) {
      dataSize += computeInt32SizeNoTag([value intValue]);
    }
    size += dataSize;
    if (self.mutableContactSummaryList.count > 0) {
      size += 1;
      size += computeInt32SizeNoTag(dataSize);
    }
    contactSummaryMemoizedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutableGroupSummaryList) {
      dataSize += computeInt32SizeNoTag([value intValue]);
    }
    size += dataSize;
    if (self.mutableGroupSummaryList.count > 0) {
      size += 1;
      size += computeInt32SizeNoTag(dataSize);
    }
    groupSummaryMemoizedSerializedSize = dataSize;
  }
  if (self.hasContactListVersion) {
    size += computeInt32Size(3, self.contactListVersion);
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutableContactVersionList) {
      dataSize += computeInt32SizeNoTag([value intValue]);
    }
    size += dataSize;
    if (self.mutableContactVersionList.count > 0) {
      size += 1;
      size += computeInt32SizeNoTag(dataSize);
    }
    contactVersionMemoizedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutableGroupVersionList) {
      dataSize += computeInt32SizeNoTag([value intValue]);
    }
    size += dataSize;
    if (self.mutableGroupVersionList.count > 0) {
      size += 1;
      size += computeInt32SizeNoTag(dataSize);
    }
    groupVersionMemoizedSerializedSize = dataSize;
  }
  if (self.hasBusinessCardVersion) {
    size += computeInt32Size(6, self.businessCardVersion);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (ContactListSummaryResponse*) parseFromData:(NSData*) data {
  return (ContactListSummaryResponse*)[[[ContactListSummaryResponse builder] mergeFromData:data] build];
}
+ (ContactListSummaryResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContactListSummaryResponse*)[[[ContactListSummaryResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ContactListSummaryResponse*) parseFromInputStream:(NSInputStream*) input {
  return (ContactListSummaryResponse*)[[[ContactListSummaryResponse builder] mergeFromInputStream:input] build];
}
+ (ContactListSummaryResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContactListSummaryResponse*)[[[ContactListSummaryResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContactListSummaryResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ContactListSummaryResponse*)[[[ContactListSummaryResponse builder] mergeFromCodedInputStream:input] build];
}
+ (ContactListSummaryResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ContactListSummaryResponse*)[[[ContactListSummaryResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContactListSummaryResponse_Builder*) builder {
  return [[[ContactListSummaryResponse_Builder alloc] init] autorelease];
}
+ (ContactListSummaryResponse_Builder*) builderWithPrototype:(ContactListSummaryResponse*) prototype {
  return [[ContactListSummaryResponse builder] mergeFrom:prototype];
}
- (ContactListSummaryResponse_Builder*) builder {
  return [ContactListSummaryResponse builder];
}
@end

@interface ContactListSummaryResponse_Builder()
@property (retain) ContactListSummaryResponse* result;
@end

@implementation ContactListSummaryResponse_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[ContactListSummaryResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ContactListSummaryResponse_Builder*) clear {
  self.result = [[[ContactListSummaryResponse alloc] init] autorelease];
  return self;
}
- (ContactListSummaryResponse_Builder*) clone {
  return [ContactListSummaryResponse builderWithPrototype:result];
}
- (ContactListSummaryResponse*) defaultInstance {
  return [ContactListSummaryResponse defaultInstance];
}
- (ContactListSummaryResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ContactListSummaryResponse*) buildPartial {
  ContactListSummaryResponse* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (ContactListSummaryResponse_Builder*) mergeFrom:(ContactListSummaryResponse*) other {
  if (other == [ContactListSummaryResponse defaultInstance]) {
    return self;
  }
  if (other.mutableContactSummaryList.count > 0) {
    if (result.mutableContactSummaryList == nil) {
      result.mutableContactSummaryList = [NSMutableArray array];
    }
    [result.mutableContactSummaryList addObjectsFromArray:other.mutableContactSummaryList];
  }
  if (other.mutableGroupSummaryList.count > 0) {
    if (result.mutableGroupSummaryList == nil) {
      result.mutableGroupSummaryList = [NSMutableArray array];
    }
    [result.mutableGroupSummaryList addObjectsFromArray:other.mutableGroupSummaryList];
  }
  if (other.hasContactListVersion) {
    [self setContactListVersion:other.contactListVersion];
  }
  if (other.mutableContactVersionList.count > 0) {
    if (result.mutableContactVersionList == nil) {
      result.mutableContactVersionList = [NSMutableArray array];
    }
    [result.mutableContactVersionList addObjectsFromArray:other.mutableContactVersionList];
  }
  if (other.mutableGroupVersionList.count > 0) {
    if (result.mutableGroupVersionList == nil) {
      result.mutableGroupVersionList = [NSMutableArray array];
    }
    [result.mutableGroupVersionList addObjectsFromArray:other.mutableGroupVersionList];
  }
  if (other.hasBusinessCardVersion) {
    [self setBusinessCardVersion:other.businessCardVersion];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContactListSummaryResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContactListSummaryResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        while (input.bytesUntilLimit > 0) {
          [self addContactSummary:[input readInt32]];
        }
        [input popLimit:limit];
        break;
      }
      case 18: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        while (input.bytesUntilLimit > 0) {
          [self addGroupSummary:[input readInt32]];
        }
        [input popLimit:limit];
        break;
      }
      case 24: {
        [self setContactListVersion:[input readInt32]];
        break;
      }
      case 34: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        while (input.bytesUntilLimit > 0) {
          [self addContactVersion:[input readInt32]];
        }
        [input popLimit:limit];
        break;
      }
      case 42: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        while (input.bytesUntilLimit > 0) {
          [self addGroupVersion:[input readInt32]];
        }
        [input popLimit:limit];
        break;
      }
      case 48: {
        [self setBusinessCardVersion:[input readInt32]];
        break;
      }
    }
  }
}
- (NSArray*) contactSummaryList {
  if (result.mutableContactSummaryList == nil) {
    return [NSArray array];
  }
  return result.mutableContactSummaryList;
}
- (int32_t) contactSummaryAtIndex:(int32_t) index {
  return [result contactSummaryAtIndex:index];
}
- (ContactListSummaryResponse_Builder*) replaceContactSummaryAtIndex:(int32_t) index with:(int32_t) value {
  [result.mutableContactSummaryList replaceObjectAtIndex:index withObject:[NSNumber numberWithInt:value]];
  return self;
}
- (ContactListSummaryResponse_Builder*) addContactSummary:(int32_t) value {
  if (result.mutableContactSummaryList == nil) {
    result.mutableContactSummaryList = [NSMutableArray array];
  }
  [result.mutableContactSummaryList addObject:[NSNumber numberWithInt:value]];
  return self;
}
- (ContactListSummaryResponse_Builder*) addAllContactSummary:(NSArray*) values {
  if (result.mutableContactSummaryList == nil) {
    result.mutableContactSummaryList = [NSMutableArray array];
  }
  [result.mutableContactSummaryList addObjectsFromArray:values];
  return self;
}
- (ContactListSummaryResponse_Builder*) clearContactSummaryList {
  result.mutableContactSummaryList = nil;
  return self;
}
- (NSArray*) groupSummaryList {
  if (result.mutableGroupSummaryList == nil) {
    return [NSArray array];
  }
  return result.mutableGroupSummaryList;
}
- (int32_t) groupSummaryAtIndex:(int32_t) index {
  return [result groupSummaryAtIndex:index];
}
- (ContactListSummaryResponse_Builder*) replaceGroupSummaryAtIndex:(int32_t) index with:(int32_t) value {
  [result.mutableGroupSummaryList replaceObjectAtIndex:index withObject:[NSNumber numberWithInt:value]];
  return self;
}
- (ContactListSummaryResponse_Builder*) addGroupSummary:(int32_t) value {
  if (result.mutableGroupSummaryList == nil) {
    result.mutableGroupSummaryList = [NSMutableArray array];
  }
  [result.mutableGroupSummaryList addObject:[NSNumber numberWithInt:value]];
  return self;
}
- (ContactListSummaryResponse_Builder*) addAllGroupSummary:(NSArray*) values {
  if (result.mutableGroupSummaryList == nil) {
    result.mutableGroupSummaryList = [NSMutableArray array];
  }
  [result.mutableGroupSummaryList addObjectsFromArray:values];
  return self;
}
- (ContactListSummaryResponse_Builder*) clearGroupSummaryList {
  result.mutableGroupSummaryList = nil;
  return self;
}
- (BOOL) hasContactListVersion {
  return result.hasContactListVersion;
}
- (int32_t) contactListVersion {
  return result.contactListVersion;
}
- (ContactListSummaryResponse_Builder*) setContactListVersion:(int32_t) value {
  result.hasContactListVersion = YES;
  result.contactListVersion = value;
  return self;
}
- (ContactListSummaryResponse_Builder*) clearContactListVersion {
  result.hasContactListVersion = NO;
  result.contactListVersion = 0;
  return self;
}
- (NSArray*) contactVersionList {
  if (result.mutableContactVersionList == nil) {
    return [NSArray array];
  }
  return result.mutableContactVersionList;
}
- (int32_t) contactVersionAtIndex:(int32_t) index {
  return [result contactVersionAtIndex:index];
}
- (ContactListSummaryResponse_Builder*) replaceContactVersionAtIndex:(int32_t) index with:(int32_t) value {
  [result.mutableContactVersionList replaceObjectAtIndex:index withObject:[NSNumber numberWithInt:value]];
  return self;
}
- (ContactListSummaryResponse_Builder*) addContactVersion:(int32_t) value {
  if (result.mutableContactVersionList == nil) {
    result.mutableContactVersionList = [NSMutableArray array];
  }
  [result.mutableContactVersionList addObject:[NSNumber numberWithInt:value]];
  return self;
}
- (ContactListSummaryResponse_Builder*) addAllContactVersion:(NSArray*) values {
  if (result.mutableContactVersionList == nil) {
    result.mutableContactVersionList = [NSMutableArray array];
  }
  [result.mutableContactVersionList addObjectsFromArray:values];
  return self;
}
- (ContactListSummaryResponse_Builder*) clearContactVersionList {
  result.mutableContactVersionList = nil;
  return self;
}
- (NSArray*) groupVersionList {
  if (result.mutableGroupVersionList == nil) {
    return [NSArray array];
  }
  return result.mutableGroupVersionList;
}
- (int32_t) groupVersionAtIndex:(int32_t) index {
  return [result groupVersionAtIndex:index];
}
- (ContactListSummaryResponse_Builder*) replaceGroupVersionAtIndex:(int32_t) index with:(int32_t) value {
  [result.mutableGroupVersionList replaceObjectAtIndex:index withObject:[NSNumber numberWithInt:value]];
  return self;
}
- (ContactListSummaryResponse_Builder*) addGroupVersion:(int32_t) value {
  if (result.mutableGroupVersionList == nil) {
    result.mutableGroupVersionList = [NSMutableArray array];
  }
  [result.mutableGroupVersionList addObject:[NSNumber numberWithInt:value]];
  return self;
}
- (ContactListSummaryResponse_Builder*) addAllGroupVersion:(NSArray*) values {
  if (result.mutableGroupVersionList == nil) {
    result.mutableGroupVersionList = [NSMutableArray array];
  }
  [result.mutableGroupVersionList addObjectsFromArray:values];
  return self;
}
- (ContactListSummaryResponse_Builder*) clearGroupVersionList {
  result.mutableGroupVersionList = nil;
  return self;
}
- (BOOL) hasBusinessCardVersion {
  return result.hasBusinessCardVersion;
}
- (int32_t) businessCardVersion {
  return result.businessCardVersion;
}
- (ContactListSummaryResponse_Builder*) setBusinessCardVersion:(int32_t) value {
  result.hasBusinessCardVersion = YES;
  result.businessCardVersion = value;
  return self;
}
- (ContactListSummaryResponse_Builder*) clearBusinessCardVersion {
  result.hasBusinessCardVersion = NO;
  result.businessCardVersion = 0;
  return self;
}
@end

