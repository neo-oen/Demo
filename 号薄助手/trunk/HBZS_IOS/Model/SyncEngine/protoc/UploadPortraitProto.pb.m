// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "UploadPortraitProto.pb.h"

@implementation UploadPortraitProtoRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [UploadPortraitProtoRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [BaseTypeProtoRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface UploadPortraitData ()
@property (retain) PortraitData* portraitData;
@end

@implementation UploadPortraitData

- (BOOL) hasPortraitData {
  return !!hasPortraitData_;
}
- (void) setHasPortraitData:(BOOL) value {
  hasPortraitData_ = !!value;
}
@synthesize portraitData;
- (void) dealloc {
  self.portraitData = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.portraitData = [PortraitData defaultInstance];
  }
  return self;
}
static UploadPortraitData* defaultUploadPortraitDataInstance = nil;
+ (void) initialize {
  if (self == [UploadPortraitData class]) {
    defaultUploadPortraitDataInstance = [[UploadPortraitData alloc] init];
  }
}
+ (UploadPortraitData*) defaultInstance {
  return defaultUploadPortraitDataInstance;
}
- (UploadPortraitData*) defaultInstance {
  return defaultUploadPortraitDataInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPortraitData) {
    [output writeMessage:1 value:self.portraitData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasPortraitData) {
    size += computeMessageSize(1, self.portraitData);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (UploadPortraitData*) parseFromData:(NSData*) data {
  return (UploadPortraitData*)[[[UploadPortraitData builder] mergeFromData:data] build];
}
+ (UploadPortraitData*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UploadPortraitData*)[[[UploadPortraitData builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UploadPortraitData*) parseFromInputStream:(NSInputStream*) input {
  return (UploadPortraitData*)[[[UploadPortraitData builder] mergeFromInputStream:input] build];
}
+ (UploadPortraitData*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UploadPortraitData*)[[[UploadPortraitData builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UploadPortraitData*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UploadPortraitData*)[[[UploadPortraitData builder] mergeFromCodedInputStream:input] build];
}
+ (UploadPortraitData*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UploadPortraitData*)[[[UploadPortraitData builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UploadPortraitData_Builder*) builder {
  return [[[UploadPortraitData_Builder alloc] init] autorelease];
}
+ (UploadPortraitData_Builder*) builderWithPrototype:(UploadPortraitData*) prototype {
  return [[UploadPortraitData builder] mergeFrom:prototype];
}
- (UploadPortraitData_Builder*) builder {
  return [UploadPortraitData builder];
}
@end

@interface UploadPortraitData_Builder()
@property (retain) UploadPortraitData* result;
@end

@implementation UploadPortraitData_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[UploadPortraitData alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UploadPortraitData_Builder*) clear {
  self.result = [[[UploadPortraitData alloc] init] autorelease];
  return self;
}
- (UploadPortraitData_Builder*) clone {
  return [UploadPortraitData builderWithPrototype:result];
}
- (UploadPortraitData*) defaultInstance {
  return [UploadPortraitData defaultInstance];
}
- (UploadPortraitData*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UploadPortraitData*) buildPartial {
  UploadPortraitData* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (UploadPortraitData_Builder*) mergeFrom:(UploadPortraitData*) other {
  if (other == [UploadPortraitData defaultInstance]) {
    return self;
  }
  if (other.hasPortraitData) {
    [self mergePortraitData:other.portraitData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UploadPortraitData_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UploadPortraitData_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PortraitData_Builder* subBuilder = [PortraitData builder];
        if (self.hasPortraitData) {
          [subBuilder mergeFrom:self.portraitData];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPortraitData:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasPortraitData {
  return result.hasPortraitData;
}
- (PortraitData*) portraitData {
  return result.portraitData;
}
- (UploadPortraitData_Builder*) setPortraitData:(PortraitData*) value {
  result.hasPortraitData = YES;
  result.portraitData = value;
  return self;
}
- (UploadPortraitData_Builder*) setPortraitDataBuilder:(PortraitData_Builder*) builderForValue {
  return [self setPortraitData:[builderForValue build]];
}
- (UploadPortraitData_Builder*) mergePortraitData:(PortraitData*) value {
  if (result.hasPortraitData &&
      result.portraitData != [PortraitData defaultInstance]) {
    result.portraitData =
      [[[PortraitData builderWithPrototype:result.portraitData] mergeFrom:value] buildPartial];
  } else {
    result.portraitData = value;
  }
  result.hasPortraitData = YES;
  return self;
}
- (UploadPortraitData_Builder*) clearPortraitData {
  result.hasPortraitData = NO;
  result.portraitData = [PortraitData defaultInstance];
  return self;
}
@end

@interface UploadPortraitRequest ()
@property (retain) NSMutableArray* mutablePortraitList;
@property (retain) PortraitData* businessCardPortrait;
@end

@implementation UploadPortraitRequest

@synthesize mutablePortraitList;
- (BOOL) hasBusinessCardPortrait {
  return !!hasBusinessCardPortrait_;
}
- (void) setHasBusinessCardPortrait:(BOOL) value {
  hasBusinessCardPortrait_ = !!value;
}
@synthesize businessCardPortrait;
- (void) dealloc {
  self.mutablePortraitList = nil;
  self.businessCardPortrait = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.businessCardPortrait = [PortraitData defaultInstance];
  }
  return self;
}
static UploadPortraitRequest* defaultUploadPortraitRequestInstance = nil;
+ (void) initialize {
  if (self == [UploadPortraitRequest class]) {
    defaultUploadPortraitRequestInstance = [[UploadPortraitRequest alloc] init];
  }
}
+ (UploadPortraitRequest*) defaultInstance {
  return defaultUploadPortraitRequestInstance;
}
- (UploadPortraitRequest*) defaultInstance {
  return defaultUploadPortraitRequestInstance;
}
- (NSArray*) portraitList {
  return mutablePortraitList;
}
- (UploadPortraitData*) portraitAtIndex:(int32_t) index {
  id value = [mutablePortraitList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (UploadPortraitData* element in self.portraitList) {
    [output writeMessage:1 value:element];
  }
  if (self.hasBusinessCardPortrait) {
    [output writeMessage:2 value:self.businessCardPortrait];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (UploadPortraitData* element in self.portraitList) {
    size += computeMessageSize(1, element);
  }
  if (self.hasBusinessCardPortrait) {
    size += computeMessageSize(2, self.businessCardPortrait);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (UploadPortraitRequest*) parseFromData:(NSData*) data {
  return (UploadPortraitRequest*)[[[UploadPortraitRequest builder] mergeFromData:data] build];
}
+ (UploadPortraitRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UploadPortraitRequest*)[[[UploadPortraitRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UploadPortraitRequest*) parseFromInputStream:(NSInputStream*) input {
  return (UploadPortraitRequest*)[[[UploadPortraitRequest builder] mergeFromInputStream:input] build];
}
+ (UploadPortraitRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UploadPortraitRequest*)[[[UploadPortraitRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UploadPortraitRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UploadPortraitRequest*)[[[UploadPortraitRequest builder] mergeFromCodedInputStream:input] build];
}
+ (UploadPortraitRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UploadPortraitRequest*)[[[UploadPortraitRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UploadPortraitRequest_Builder*) builder {
  return [[[UploadPortraitRequest_Builder alloc] init] autorelease];
}
+ (UploadPortraitRequest_Builder*) builderWithPrototype:(UploadPortraitRequest*) prototype {
  return [[UploadPortraitRequest builder] mergeFrom:prototype];
}
- (UploadPortraitRequest_Builder*) builder {
  return [UploadPortraitRequest builder];
}
@end

@interface UploadPortraitRequest_Builder()
@property (retain) UploadPortraitRequest* result;
@end

@implementation UploadPortraitRequest_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[UploadPortraitRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UploadPortraitRequest_Builder*) clear {
  self.result = [[[UploadPortraitRequest alloc] init] autorelease];
  return self;
}
- (UploadPortraitRequest_Builder*) clone {
  return [UploadPortraitRequest builderWithPrototype:result];
}
- (UploadPortraitRequest*) defaultInstance {
  return [UploadPortraitRequest defaultInstance];
}
- (UploadPortraitRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UploadPortraitRequest*) buildPartial {
  UploadPortraitRequest* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (UploadPortraitRequest_Builder*) mergeFrom:(UploadPortraitRequest*) other {
  if (other == [UploadPortraitRequest defaultInstance]) {
    return self;
  }
  if (other.mutablePortraitList.count > 0) {
    if (result.mutablePortraitList == nil) {
      result.mutablePortraitList = [NSMutableArray array];
    }
    [result.mutablePortraitList addObjectsFromArray:other.mutablePortraitList];
  }
  if (other.hasBusinessCardPortrait) {
    [self mergeBusinessCardPortrait:other.businessCardPortrait];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UploadPortraitRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UploadPortraitRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        UploadPortraitData_Builder* subBuilder = [UploadPortraitData builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPortrait:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        PortraitData_Builder* subBuilder = [PortraitData builder];
        if (self.hasBusinessCardPortrait) {
          [subBuilder mergeFrom:self.businessCardPortrait];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBusinessCardPortrait:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) portraitList {
  if (result.mutablePortraitList == nil) { return [NSArray array]; }
  return result.mutablePortraitList;
}
- (UploadPortraitData*) portraitAtIndex:(int32_t) index {
  return [result portraitAtIndex:index];
}
- (UploadPortraitRequest_Builder*) replacePortraitAtIndex:(int32_t) index with:(UploadPortraitData*) value {
  [result.mutablePortraitList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (UploadPortraitRequest_Builder*) addAllPortrait:(NSArray*) values {
  if (result.mutablePortraitList == nil) {
    result.mutablePortraitList = [NSMutableArray array];
  }
  [result.mutablePortraitList addObjectsFromArray:values];
  return self;
}
- (UploadPortraitRequest_Builder*) clearPortraitList {
  result.mutablePortraitList = nil;
  return self;
}
- (UploadPortraitRequest_Builder*) addPortrait:(UploadPortraitData*) value {
  if (result.mutablePortraitList == nil) {
    result.mutablePortraitList = [NSMutableArray array];
  }
  [result.mutablePortraitList addObject:value];
  return self;
}
- (BOOL) hasBusinessCardPortrait {
  return result.hasBusinessCardPortrait;
}
- (PortraitData*) businessCardPortrait {
  return result.businessCardPortrait;
}
- (UploadPortraitRequest_Builder*) setBusinessCardPortrait:(PortraitData*) value {
  result.hasBusinessCardPortrait = YES;
  result.businessCardPortrait = value;
  return self;
}
- (UploadPortraitRequest_Builder*) setBusinessCardPortraitBuilder:(PortraitData_Builder*) builderForValue {
  return [self setBusinessCardPortrait:[builderForValue build]];
}
- (UploadPortraitRequest_Builder*) mergeBusinessCardPortrait:(PortraitData*) value {
  if (result.hasBusinessCardPortrait &&
      result.businessCardPortrait != [PortraitData defaultInstance]) {
    result.businessCardPortrait =
      [[[PortraitData builderWithPrototype:result.businessCardPortrait] mergeFrom:value] buildPartial];
  } else {
    result.businessCardPortrait = value;
  }
  result.hasBusinessCardPortrait = YES;
  return self;
}
- (UploadPortraitRequest_Builder*) clearBusinessCardPortrait {
  result.hasBusinessCardPortrait = NO;
  result.businessCardPortrait = [PortraitData defaultInstance];
  return self;
}
@end

@interface PortraitSummary ()
@property int32_t sid;
@property int32_t portraitVersion;
@end

@implementation PortraitSummary

- (BOOL) hasSid {
  return !!hasSid_;
}
- (void) setHasSid:(BOOL) value {
  hasSid_ = !!value;
}
@synthesize sid;
- (BOOL) hasPortraitVersion {
  return !!hasPortraitVersion_;
}
- (void) setHasPortraitVersion:(BOOL) value {
  hasPortraitVersion_ = !!value;
}
@synthesize portraitVersion;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.sid = 0;
    self.portraitVersion = 0;
  }
  return self;
}
static PortraitSummary* defaultPortraitSummaryInstance = nil;
+ (void) initialize {
  if (self == [PortraitSummary class]) {
    defaultPortraitSummaryInstance = [[PortraitSummary alloc] init];
  }
}
+ (PortraitSummary*) defaultInstance {
  return defaultPortraitSummaryInstance;
}
- (PortraitSummary*) defaultInstance {
  return defaultPortraitSummaryInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSid) {
    [output writeInt32:1 value:self.sid];
  }
  if (self.hasPortraitVersion) {
    [output writeInt32:2 value:self.portraitVersion];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasSid) {
    size += computeInt32Size(1, self.sid);
  }
  if (self.hasPortraitVersion) {
    size += computeInt32Size(2, self.portraitVersion);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PortraitSummary*) parseFromData:(NSData*) data {
  return (PortraitSummary*)[[[PortraitSummary builder] mergeFromData:data] build];
}
+ (PortraitSummary*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PortraitSummary*)[[[PortraitSummary builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PortraitSummary*) parseFromInputStream:(NSInputStream*) input {
  return (PortraitSummary*)[[[PortraitSummary builder] mergeFromInputStream:input] build];
}
+ (PortraitSummary*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PortraitSummary*)[[[PortraitSummary builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PortraitSummary*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PortraitSummary*)[[[PortraitSummary builder] mergeFromCodedInputStream:input] build];
}
+ (PortraitSummary*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PortraitSummary*)[[[PortraitSummary builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PortraitSummary_Builder*) builder {
  return [[[PortraitSummary_Builder alloc] init] autorelease];
}
+ (PortraitSummary_Builder*) builderWithPrototype:(PortraitSummary*) prototype {
  return [[PortraitSummary builder] mergeFrom:prototype];
}
- (PortraitSummary_Builder*) builder {
  return [PortraitSummary builder];
}
@end

@interface PortraitSummary_Builder()
@property (retain) PortraitSummary* result;
@end

@implementation PortraitSummary_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PortraitSummary alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PortraitSummary_Builder*) clear {
  self.result = [[[PortraitSummary alloc] init] autorelease];
  return self;
}
- (PortraitSummary_Builder*) clone {
  return [PortraitSummary builderWithPrototype:result];
}
- (PortraitSummary*) defaultInstance {
  return [PortraitSummary defaultInstance];
}
- (PortraitSummary*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PortraitSummary*) buildPartial {
  PortraitSummary* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PortraitSummary_Builder*) mergeFrom:(PortraitSummary*) other {
  if (other == [PortraitSummary defaultInstance]) {
    return self;
  }
  if (other.hasSid) {
    [self setSid:other.sid];
  }
  if (other.hasPortraitVersion) {
    [self setPortraitVersion:other.portraitVersion];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PortraitSummary_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PortraitSummary_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSid:[input readInt32]];
        break;
      }
      case 16: {
        [self setPortraitVersion:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSid {
  return result.hasSid;
}
- (int32_t) sid {
  return result.sid;
}
- (PortraitSummary_Builder*) setSid:(int32_t) value {
  result.hasSid = YES;
  result.sid = value;
  return self;
}
- (PortraitSummary_Builder*) clearSid {
  result.hasSid = NO;
  result.sid = 0;
  return self;
}
- (BOOL) hasPortraitVersion {
  return result.hasPortraitVersion;
}
- (int32_t) portraitVersion {
  return result.portraitVersion;
}
- (PortraitSummary_Builder*) setPortraitVersion:(int32_t) value {
  result.hasPortraitVersion = YES;
  result.portraitVersion = value;
  return self;
}
- (PortraitSummary_Builder*) clearPortraitVersion {
  result.hasPortraitVersion = NO;
  result.portraitVersion = 0;
  return self;
}
@end

@interface UploadPortraitResponse ()
@property (retain) NSMutableArray* mutablePortraitSummaryList;
@property int32_t businessCardPortraitVersion;
@end

@implementation UploadPortraitResponse

@synthesize mutablePortraitSummaryList;
- (BOOL) hasBusinessCardPortraitVersion {
  return !!hasBusinessCardPortraitVersion_;
}
- (void) setHasBusinessCardPortraitVersion:(BOOL) value {
  hasBusinessCardPortraitVersion_ = !!value;
}
@synthesize businessCardPortraitVersion;
- (void) dealloc {
  self.mutablePortraitSummaryList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.businessCardPortraitVersion = 0;
  }
  return self;
}
static UploadPortraitResponse* defaultUploadPortraitResponseInstance = nil;
+ (void) initialize {
  if (self == [UploadPortraitResponse class]) {
    defaultUploadPortraitResponseInstance = [[UploadPortraitResponse alloc] init];
  }
}
+ (UploadPortraitResponse*) defaultInstance {
  return defaultUploadPortraitResponseInstance;
}
- (UploadPortraitResponse*) defaultInstance {
  return defaultUploadPortraitResponseInstance;
}
- (NSArray*) portraitSummaryList {
  return mutablePortraitSummaryList;
}
- (PortraitSummary*) portraitSummaryAtIndex:(int32_t) index {
  id value = [mutablePortraitSummaryList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (PortraitSummary* element in self.portraitSummaryList) {
    [output writeMessage:2 value:element];
  }
  if (self.hasBusinessCardPortraitVersion) {
    [output writeInt32:3 value:self.businessCardPortraitVersion];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (PortraitSummary* element in self.portraitSummaryList) {
    size += computeMessageSize(2, element);
  }
  if (self.hasBusinessCardPortraitVersion) {
    size += computeInt32Size(3, self.businessCardPortraitVersion);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (UploadPortraitResponse*) parseFromData:(NSData*) data {
  return (UploadPortraitResponse*)[[[UploadPortraitResponse builder] mergeFromData:data] build];
}
+ (UploadPortraitResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UploadPortraitResponse*)[[[UploadPortraitResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UploadPortraitResponse*) parseFromInputStream:(NSInputStream*) input {
  return (UploadPortraitResponse*)[[[UploadPortraitResponse builder] mergeFromInputStream:input] build];
}
+ (UploadPortraitResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UploadPortraitResponse*)[[[UploadPortraitResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UploadPortraitResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UploadPortraitResponse*)[[[UploadPortraitResponse builder] mergeFromCodedInputStream:input] build];
}
+ (UploadPortraitResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UploadPortraitResponse*)[[[UploadPortraitResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UploadPortraitResponse_Builder*) builder {
  return [[[UploadPortraitResponse_Builder alloc] init] autorelease];
}
+ (UploadPortraitResponse_Builder*) builderWithPrototype:(UploadPortraitResponse*) prototype {
  return [[UploadPortraitResponse builder] mergeFrom:prototype];
}
- (UploadPortraitResponse_Builder*) builder {
  return [UploadPortraitResponse builder];
}
@end

@interface UploadPortraitResponse_Builder()
@property (retain) UploadPortraitResponse* result;
@end

@implementation UploadPortraitResponse_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[UploadPortraitResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UploadPortraitResponse_Builder*) clear {
  self.result = [[[UploadPortraitResponse alloc] init] autorelease];
  return self;
}
- (UploadPortraitResponse_Builder*) clone {
  return [UploadPortraitResponse builderWithPrototype:result];
}
- (UploadPortraitResponse*) defaultInstance {
  return [UploadPortraitResponse defaultInstance];
}
- (UploadPortraitResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UploadPortraitResponse*) buildPartial {
  UploadPortraitResponse* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (UploadPortraitResponse_Builder*) mergeFrom:(UploadPortraitResponse*) other {
  if (other == [UploadPortraitResponse defaultInstance]) {
    return self;
  }
  if (other.mutablePortraitSummaryList.count > 0) {
    if (result.mutablePortraitSummaryList == nil) {
      result.mutablePortraitSummaryList = [NSMutableArray array];
    }
    [result.mutablePortraitSummaryList addObjectsFromArray:other.mutablePortraitSummaryList];
  }
  if (other.hasBusinessCardPortraitVersion) {
    [self setBusinessCardPortraitVersion:other.businessCardPortraitVersion];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UploadPortraitResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UploadPortraitResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 18: {
        PortraitSummary_Builder* subBuilder = [PortraitSummary builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPortraitSummary:[subBuilder buildPartial]];
        break;
      }
      case 24: {
        [self setBusinessCardPortraitVersion:[input readInt32]];
        break;
      }
    }
  }
}
- (NSArray*) portraitSummaryList {
  if (result.mutablePortraitSummaryList == nil) { return [NSArray array]; }
  return result.mutablePortraitSummaryList;
}
- (PortraitSummary*) portraitSummaryAtIndex:(int32_t) index {
  return [result portraitSummaryAtIndex:index];
}
- (UploadPortraitResponse_Builder*) replacePortraitSummaryAtIndex:(int32_t) index with:(PortraitSummary*) value {
  [result.mutablePortraitSummaryList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (UploadPortraitResponse_Builder*) addAllPortraitSummary:(NSArray*) values {
  if (result.mutablePortraitSummaryList == nil) {
    result.mutablePortraitSummaryList = [NSMutableArray array];
  }
  [result.mutablePortraitSummaryList addObjectsFromArray:values];
  return self;
}
- (UploadPortraitResponse_Builder*) clearPortraitSummaryList {
  result.mutablePortraitSummaryList = nil;
  return self;
}
- (UploadPortraitResponse_Builder*) addPortraitSummary:(PortraitSummary*) value {
  if (result.mutablePortraitSummaryList == nil) {
    result.mutablePortraitSummaryList = [NSMutableArray array];
  }
  [result.mutablePortraitSummaryList addObject:value];
  return self;
}
- (BOOL) hasBusinessCardPortraitVersion {
  return result.hasBusinessCardPortraitVersion;
}
- (int32_t) businessCardPortraitVersion {
  return result.businessCardPortraitVersion;
}
- (UploadPortraitResponse_Builder*) setBusinessCardPortraitVersion:(int32_t) value {
  result.hasBusinessCardPortraitVersion = YES;
  result.businessCardPortraitVersion = value;
  return self;
}
- (UploadPortraitResponse_Builder*) clearBusinessCardPortraitVersion {
  result.hasBusinessCardPortraitVersion = NO;
  result.businessCardPortraitVersion = 0;
  return self;
}
@end

