// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "EncryptedProto.pb.h"

@implementation EncryptedProtoRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [EncryptedProtoRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [BaseTypeProtoRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface EncryptedData ()
@property (retain) Name* name;
@end

@implementation EncryptedData

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (void) dealloc {
  self.name = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.name = [Name defaultInstance];
  }
  return self;
}
static EncryptedData* defaultEncryptedDataInstance = nil;
+ (void) initialize {
  if (self == [EncryptedData class]) {
    defaultEncryptedDataInstance = [[EncryptedData alloc] init];
  }
}
+ (EncryptedData*) defaultInstance {
  return defaultEncryptedDataInstance;
}
- (EncryptedData*) defaultInstance {
  return defaultEncryptedDataInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeMessage:1 value:self.name];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasName) {
    size += computeMessageSize(1, self.name);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (EncryptedData*) parseFromData:(NSData*) data {
  return (EncryptedData*)[[[EncryptedData builder] mergeFromData:data] build];
}
+ (EncryptedData*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (EncryptedData*)[[[EncryptedData builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (EncryptedData*) parseFromInputStream:(NSInputStream*) input {
  return (EncryptedData*)[[[EncryptedData builder] mergeFromInputStream:input] build];
}
+ (EncryptedData*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (EncryptedData*)[[[EncryptedData builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (EncryptedData*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (EncryptedData*)[[[EncryptedData builder] mergeFromCodedInputStream:input] build];
}
+ (EncryptedData*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (EncryptedData*)[[[EncryptedData builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (EncryptedData_Builder*) builder {
  return [[[EncryptedData_Builder alloc] init] autorelease];
}
+ (EncryptedData_Builder*) builderWithPrototype:(EncryptedData*) prototype {
  return [[EncryptedData builder] mergeFrom:prototype];
}
- (EncryptedData_Builder*) builder {
  return [EncryptedData builder];
}
@end

@interface EncryptedData_Builder()
@property (retain) EncryptedData* result;
@end

@implementation EncryptedData_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[EncryptedData alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (EncryptedData_Builder*) clear {
  self.result = [[[EncryptedData alloc] init] autorelease];
  return self;
}
- (EncryptedData_Builder*) clone {
  return [EncryptedData builderWithPrototype:result];
}
- (EncryptedData*) defaultInstance {
  return [EncryptedData defaultInstance];
}
- (EncryptedData*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (EncryptedData*) buildPartial {
  EncryptedData* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (EncryptedData_Builder*) mergeFrom:(EncryptedData*) other {
  if (other == [EncryptedData defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self mergeName:other.name];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (EncryptedData_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (EncryptedData_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        Name_Builder* subBuilder = [Name builder];
        if (self.hasName) {
          [subBuilder mergeFrom:self.name];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setName:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return result.hasName;
}
- (Name*) name {
  return result.name;
}
- (EncryptedData_Builder*) setName:(Name*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (EncryptedData_Builder*) setNameBuilder:(Name_Builder*) builderForValue {
  return [self setName:[builderForValue build]];
}
- (EncryptedData_Builder*) mergeName:(Name*) value {
  if (result.hasName &&
      result.name != [Name defaultInstance]) {
    result.name =
      [[[Name builderWithPrototype:result.name] mergeFrom:value] buildPartial];
  } else {
    result.name = value;
  }
  result.hasName = YES;
  return self;
}
- (EncryptedData_Builder*) clearName {
  result.hasName = NO;
  result.name = [Name defaultInstance];
  return self;
}
@end

