// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "IsopenMycardShareProto.pb.h"

@implementation IsopenMycardShareProtoRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [IsopenMycardShareProtoRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface IsOpenMycardShareRequest ()
@property (retain) NSString* userid;
@property int32_t cardSid;
@end

@implementation IsOpenMycardShareRequest

- (BOOL) hasUserid {
  return !!hasUserid_;
}
- (void) setHasUserid:(BOOL) value {
  hasUserid_ = !!value;
}
@synthesize userid;
- (BOOL) hasCardSid {
  return !!hasCardSid_;
}
- (void) setHasCardSid:(BOOL) value {
  hasCardSid_ = !!value;
}
@synthesize cardSid;
- (void) dealloc {
  self.userid = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userid = @"";
    self.cardSid = 0;
  }
  return self;
}
static IsOpenMycardShareRequest* defaultIsOpenMycardShareRequestInstance = nil;
+ (void) initialize {
  if (self == [IsOpenMycardShareRequest class]) {
    defaultIsOpenMycardShareRequestInstance = [[IsOpenMycardShareRequest alloc] init];
  }
}
+ (IsOpenMycardShareRequest*) defaultInstance {
  return defaultIsOpenMycardShareRequestInstance;
}
- (IsOpenMycardShareRequest*) defaultInstance {
  return defaultIsOpenMycardShareRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserid) {
    [output writeString:1 value:self.userid];
  }
  if (self.hasCardSid) {
    [output writeInt32:2 value:self.cardSid];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserid) {
    size += computeStringSize(1, self.userid);
  }
  if (self.hasCardSid) {
    size += computeInt32Size(2, self.cardSid);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (IsOpenMycardShareRequest*) parseFromData:(NSData*) data {
  return (IsOpenMycardShareRequest*)[[[IsOpenMycardShareRequest builder] mergeFromData:data] build];
}
+ (IsOpenMycardShareRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IsOpenMycardShareRequest*)[[[IsOpenMycardShareRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IsOpenMycardShareRequest*) parseFromInputStream:(NSInputStream*) input {
  return (IsOpenMycardShareRequest*)[[[IsOpenMycardShareRequest builder] mergeFromInputStream:input] build];
}
+ (IsOpenMycardShareRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IsOpenMycardShareRequest*)[[[IsOpenMycardShareRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IsOpenMycardShareRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IsOpenMycardShareRequest*)[[[IsOpenMycardShareRequest builder] mergeFromCodedInputStream:input] build];
}
+ (IsOpenMycardShareRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IsOpenMycardShareRequest*)[[[IsOpenMycardShareRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IsOpenMycardShareRequest_Builder*) builder {
  return [[[IsOpenMycardShareRequest_Builder alloc] init] autorelease];
}
+ (IsOpenMycardShareRequest_Builder*) builderWithPrototype:(IsOpenMycardShareRequest*) prototype {
  return [[IsOpenMycardShareRequest builder] mergeFrom:prototype];
}
- (IsOpenMycardShareRequest_Builder*) builder {
  return [IsOpenMycardShareRequest builder];
}
@end

@interface IsOpenMycardShareRequest_Builder()
@property (retain) IsOpenMycardShareRequest* result;
@end

@implementation IsOpenMycardShareRequest_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[IsOpenMycardShareRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (IsOpenMycardShareRequest_Builder*) clear {
  self.result = [[[IsOpenMycardShareRequest alloc] init] autorelease];
  return self;
}
- (IsOpenMycardShareRequest_Builder*) clone {
  return [IsOpenMycardShareRequest builderWithPrototype:result];
}
- (IsOpenMycardShareRequest*) defaultInstance {
  return [IsOpenMycardShareRequest defaultInstance];
}
- (IsOpenMycardShareRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IsOpenMycardShareRequest*) buildPartial {
  IsOpenMycardShareRequest* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (IsOpenMycardShareRequest_Builder*) mergeFrom:(IsOpenMycardShareRequest*) other {
  if (other == [IsOpenMycardShareRequest defaultInstance]) {
    return self;
  }
  if (other.hasUserid) {
    [self setUserid:other.userid];
  }
  if (other.hasCardSid) {
    [self setCardSid:other.cardSid];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IsOpenMycardShareRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IsOpenMycardShareRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserid:[input readString]];
        break;
      }
      case 16: {
        [self setCardSid:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserid {
  return result.hasUserid;
}
- (NSString*) userid {
  return result.userid;
}
- (IsOpenMycardShareRequest_Builder*) setUserid:(NSString*) value {
  result.hasUserid = YES;
  result.userid = value;
  return self;
}
- (IsOpenMycardShareRequest_Builder*) clearUserid {
  result.hasUserid = NO;
  result.userid = @"";
  return self;
}
- (BOOL) hasCardSid {
  return result.hasCardSid;
}
- (int32_t) cardSid {
  return result.cardSid;
}
- (IsOpenMycardShareRequest_Builder*) setCardSid:(int32_t) value {
  result.hasCardSid = YES;
  result.cardSid = value;
  return self;
}
- (IsOpenMycardShareRequest_Builder*) clearCardSid {
  result.hasCardSid = NO;
  result.cardSid = 0;
  return self;
}
@end

@interface IsOpenMycardShareResponse ()
@property int32_t isopenMycard;
@property (retain) NSString* cardSidShareUrl;
@end

@implementation IsOpenMycardShareResponse

- (BOOL) hasIsopenMycard {
  return !!hasIsopenMycard_;
}
- (void) setHasIsopenMycard:(BOOL) value {
  hasIsopenMycard_ = !!value;
}
@synthesize isopenMycard;
- (BOOL) hasCardSidShareUrl {
  return !!hasCardSidShareUrl_;
}
- (void) setHasCardSidShareUrl:(BOOL) value {
  hasCardSidShareUrl_ = !!value;
}
@synthesize cardSidShareUrl;
- (void) dealloc {
  self.cardSidShareUrl = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.isopenMycard = 0;
    self.cardSidShareUrl = @"";
  }
  return self;
}
static IsOpenMycardShareResponse* defaultIsOpenMycardShareResponseInstance = nil;
+ (void) initialize {
  if (self == [IsOpenMycardShareResponse class]) {
    defaultIsOpenMycardShareResponseInstance = [[IsOpenMycardShareResponse alloc] init];
  }
}
+ (IsOpenMycardShareResponse*) defaultInstance {
  return defaultIsOpenMycardShareResponseInstance;
}
- (IsOpenMycardShareResponse*) defaultInstance {
  return defaultIsOpenMycardShareResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasIsopenMycard) {
    [output writeInt32:1 value:self.isopenMycard];
  }
  if (self.hasCardSidShareUrl) {
    [output writeString:2 value:self.cardSidShareUrl];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasIsopenMycard) {
    size += computeInt32Size(1, self.isopenMycard);
  }
  if (self.hasCardSidShareUrl) {
    size += computeStringSize(2, self.cardSidShareUrl);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (IsOpenMycardShareResponse*) parseFromData:(NSData*) data {
  return (IsOpenMycardShareResponse*)[[[IsOpenMycardShareResponse builder] mergeFromData:data] build];
}
+ (IsOpenMycardShareResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IsOpenMycardShareResponse*)[[[IsOpenMycardShareResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IsOpenMycardShareResponse*) parseFromInputStream:(NSInputStream*) input {
  return (IsOpenMycardShareResponse*)[[[IsOpenMycardShareResponse builder] mergeFromInputStream:input] build];
}
+ (IsOpenMycardShareResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IsOpenMycardShareResponse*)[[[IsOpenMycardShareResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IsOpenMycardShareResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IsOpenMycardShareResponse*)[[[IsOpenMycardShareResponse builder] mergeFromCodedInputStream:input] build];
}
+ (IsOpenMycardShareResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IsOpenMycardShareResponse*)[[[IsOpenMycardShareResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IsOpenMycardShareResponse_Builder*) builder {
  return [[[IsOpenMycardShareResponse_Builder alloc] init] autorelease];
}
+ (IsOpenMycardShareResponse_Builder*) builderWithPrototype:(IsOpenMycardShareResponse*) prototype {
  return [[IsOpenMycardShareResponse builder] mergeFrom:prototype];
}
- (IsOpenMycardShareResponse_Builder*) builder {
  return [IsOpenMycardShareResponse builder];
}
@end

@interface IsOpenMycardShareResponse_Builder()
@property (retain) IsOpenMycardShareResponse* result;
@end

@implementation IsOpenMycardShareResponse_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[IsOpenMycardShareResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (IsOpenMycardShareResponse_Builder*) clear {
  self.result = [[[IsOpenMycardShareResponse alloc] init] autorelease];
  return self;
}
- (IsOpenMycardShareResponse_Builder*) clone {
  return [IsOpenMycardShareResponse builderWithPrototype:result];
}
- (IsOpenMycardShareResponse*) defaultInstance {
  return [IsOpenMycardShareResponse defaultInstance];
}
- (IsOpenMycardShareResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IsOpenMycardShareResponse*) buildPartial {
  IsOpenMycardShareResponse* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (IsOpenMycardShareResponse_Builder*) mergeFrom:(IsOpenMycardShareResponse*) other {
  if (other == [IsOpenMycardShareResponse defaultInstance]) {
    return self;
  }
  if (other.hasIsopenMycard) {
    [self setIsopenMycard:other.isopenMycard];
  }
  if (other.hasCardSidShareUrl) {
    [self setCardSidShareUrl:other.cardSidShareUrl];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IsOpenMycardShareResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IsOpenMycardShareResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setIsopenMycard:[input readInt32]];
        break;
      }
      case 18: {
        [self setCardSidShareUrl:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasIsopenMycard {
  return result.hasIsopenMycard;
}
- (int32_t) isopenMycard {
  return result.isopenMycard;
}
- (IsOpenMycardShareResponse_Builder*) setIsopenMycard:(int32_t) value {
  result.hasIsopenMycard = YES;
  result.isopenMycard = value;
  return self;
}
- (IsOpenMycardShareResponse_Builder*) clearIsopenMycard {
  result.hasIsopenMycard = NO;
  result.isopenMycard = 0;
  return self;
}
- (BOOL) hasCardSidShareUrl {
  return result.hasCardSidShareUrl;
}
- (NSString*) cardSidShareUrl {
  return result.cardSidShareUrl;
}
- (IsOpenMycardShareResponse_Builder*) setCardSidShareUrl:(NSString*) value {
  result.hasCardSidShareUrl = YES;
  result.cardSidShareUrl = value;
  return self;
}
- (IsOpenMycardShareResponse_Builder*) clearCardSidShareUrl {
  result.hasCardSidShareUrl = NO;
  result.cardSidShareUrl = @"";
  return self;
}
@end

