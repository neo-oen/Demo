// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "GetSplashProto.pb.h"

@implementation GetSplashProtoRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [GetSplashProtoRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [BaseTypeProtoRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface Splash ()
@property (retain) NSData* data;
@property (retain) NSString* url;
@property (retain) NSString* imageType;
@end

@implementation Splash

- (BOOL) hasData {
  return !!hasData_;
}
- (void) setHasData:(BOOL) value {
  hasData_ = !!value;
}
@synthesize data;
- (BOOL) hasUrl {
  return !!hasUrl_;
}
- (void) setHasUrl:(BOOL) value {
  hasUrl_ = !!value;
}
@synthesize url;
- (BOOL) hasImageType {
  return !!hasImageType_;
}
- (void) setHasImageType:(BOOL) value {
  hasImageType_ = !!value;
}
@synthesize imageType;
- (void) dealloc {
  self.data = nil;
  self.url = nil;
  self.imageType = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.data = [NSData data];
    self.url = @"";
    self.imageType = @"";
  }
  return self;
}
static Splash* defaultSplashInstance = nil;
+ (void) initialize {
  if (self == [Splash class]) {
    defaultSplashInstance = [[Splash alloc] init];
  }
}
+ (Splash*) defaultInstance {
  return defaultSplashInstance;
}
- (Splash*) defaultInstance {
  return defaultSplashInstance;
}
- (BOOL) isInitialized {
  if (!self.hasData) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasData) {
    [output writeData:1 value:self.data];
  }
  if (self.hasUrl) {
    [output writeString:2 value:self.url];
  }
  if (self.hasImageType) {
    [output writeString:3 value:self.imageType];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasData) {
    size += computeDataSize(1, self.data);
  }
  if (self.hasUrl) {
    size += computeStringSize(2, self.url);
  }
  if (self.hasImageType) {
    size += computeStringSize(3, self.imageType);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Splash*) parseFromData:(NSData*) data {
  return (Splash*)[[[Splash builder] mergeFromData:data] build];
}
+ (Splash*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Splash*)[[[Splash builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Splash*) parseFromInputStream:(NSInputStream*) input {
  return (Splash*)[[[Splash builder] mergeFromInputStream:input] build];
}
+ (Splash*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Splash*)[[[Splash builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Splash*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Splash*)[[[Splash builder] mergeFromCodedInputStream:input] build];
}
+ (Splash*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Splash*)[[[Splash builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Splash_Builder*) builder {
  return [[[Splash_Builder alloc] init] autorelease];
}
+ (Splash_Builder*) builderWithPrototype:(Splash*) prototype {
  return [[Splash builder] mergeFrom:prototype];
}
- (Splash_Builder*) builder {
  return [Splash builder];
}
@end

@interface Splash_Builder()
@property (retain) Splash* result;
@end

@implementation Splash_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Splash alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Splash_Builder*) clear {
  self.result = [[[Splash alloc] init] autorelease];
  return self;
}
- (Splash_Builder*) clone {
  return [Splash builderWithPrototype:result];
}
- (Splash*) defaultInstance {
  return [Splash defaultInstance];
}
- (Splash*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Splash*) buildPartial {
  Splash* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Splash_Builder*) mergeFrom:(Splash*) other {
  if (other == [Splash defaultInstance]) {
    return self;
  }
  if (other.hasData) {
    [self setData:other.data];
  }
  if (other.hasUrl) {
    [self setUrl:other.url];
  }
  if (other.hasImageType) {
    [self setImageType:other.imageType];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Splash_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Splash_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setData:[input readData]];
        break;
      }
      case 18: {
        [self setUrl:[input readString]];
        break;
      }
      case 26: {
        [self setImageType:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasData {
  return result.hasData;
}
- (NSData*) data {
  return result.data;
}
- (Splash_Builder*) setData:(NSData*) value {
  result.hasData = YES;
  result.data = value;
  return self;
}
- (Splash_Builder*) clearData {
  result.hasData = NO;
  result.data = [NSData data];
  return self;
}
- (BOOL) hasUrl {
  return result.hasUrl;
}
- (NSString*) url {
  return result.url;
}
- (Splash_Builder*) setUrl:(NSString*) value {
  result.hasUrl = YES;
  result.url = value;
  return self;
}
- (Splash_Builder*) clearUrl {
  result.hasUrl = NO;
  result.url = @"";
  return self;
}
- (BOOL) hasImageType {
  return result.hasImageType;
}
- (NSString*) imageType {
  return result.imageType;
}
- (Splash_Builder*) setImageType:(NSString*) value {
  result.hasImageType = YES;
  result.imageType = value;
  return self;
}
- (Splash_Builder*) clearImageType {
  result.hasImageType = NO;
  result.imageType = @"";
  return self;
}
@end

@interface GetSplashRequest ()
@property (retain) NSString* mobileNum;
@property (retain) NSString* imsi;
@property (retain) NSString* mobileManufacturer;
@property (retain) NSString* mobileType;
@property int32_t jobServerId;
@property int64_t timestamp;
@property int32_t screenWidth;
@property int32_t screenHeight;
@property Platform platform;
@property BOOL needResize;
@end

@implementation GetSplashRequest

- (BOOL) hasMobileNum {
  return !!hasMobileNum_;
}
- (void) setHasMobileNum:(BOOL) value {
  hasMobileNum_ = !!value;
}
@synthesize mobileNum;
- (BOOL) hasImsi {
  return !!hasImsi_;
}
- (void) setHasImsi:(BOOL) value {
  hasImsi_ = !!value;
}
@synthesize imsi;
- (BOOL) hasMobileManufacturer {
  return !!hasMobileManufacturer_;
}
- (void) setHasMobileManufacturer:(BOOL) value {
  hasMobileManufacturer_ = !!value;
}
@synthesize mobileManufacturer;
- (BOOL) hasMobileType {
  return !!hasMobileType_;
}
- (void) setHasMobileType:(BOOL) value {
  hasMobileType_ = !!value;
}
@synthesize mobileType;
- (BOOL) hasJobServerId {
  return !!hasJobServerId_;
}
- (void) setHasJobServerId:(BOOL) value {
  hasJobServerId_ = !!value;
}
@synthesize jobServerId;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) value {
  hasTimestamp_ = !!value;
}
@synthesize timestamp;
- (BOOL) hasScreenWidth {
  return !!hasScreenWidth_;
}
- (void) setHasScreenWidth:(BOOL) value {
  hasScreenWidth_ = !!value;
}
@synthesize screenWidth;
- (BOOL) hasScreenHeight {
  return !!hasScreenHeight_;
}
- (void) setHasScreenHeight:(BOOL) value {
  hasScreenHeight_ = !!value;
}
@synthesize screenHeight;
- (BOOL) hasPlatform {
  return !!hasPlatform_;
}
- (void) setHasPlatform:(BOOL) value {
  hasPlatform_ = !!value;
}
@synthesize platform;
- (BOOL) hasNeedResize {
  return !!hasNeedResize_;
}
- (void) setHasNeedResize:(BOOL) value {
  hasNeedResize_ = !!value;
}
- (BOOL) needResize {
  return !!needResize_;
}
- (void) setNeedResize:(BOOL) value {
  needResize_ = !!value;
}
- (void) dealloc {
  self.mobileNum = nil;
  self.imsi = nil;
  self.mobileManufacturer = nil;
  self.mobileType = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.mobileNum = @"";
    self.imsi = @"";
    self.mobileManufacturer = @"";
    self.mobileType = @"";
    self.jobServerId = 0;
    self.timestamp = 0L;
    self.screenWidth = 0;
    self.screenHeight = 0;
    self.platform = PlatformNone;
    self.needResize = NO;
  }
  return self;
}
static GetSplashRequest* defaultGetSplashRequestInstance = nil;
+ (void) initialize {
  if (self == [GetSplashRequest class]) {
    defaultGetSplashRequestInstance = [[GetSplashRequest alloc] init];
  }
}
+ (GetSplashRequest*) defaultInstance {
  return defaultGetSplashRequestInstance;
}
- (GetSplashRequest*) defaultInstance {
  return defaultGetSplashRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMobileNum) {
    [output writeString:1 value:self.mobileNum];
  }
  if (self.hasImsi) {
    [output writeString:2 value:self.imsi];
  }
  if (self.hasMobileManufacturer) {
    [output writeString:3 value:self.mobileManufacturer];
  }
  if (self.hasMobileType) {
    [output writeString:4 value:self.mobileType];
  }
  if (self.hasJobServerId) {
    [output writeInt32:5 value:self.jobServerId];
  }
  if (self.hasTimestamp) {
    [output writeInt64:6 value:self.timestamp];
  }
  if (self.hasScreenWidth) {
    [output writeInt32:7 value:self.screenWidth];
  }
  if (self.hasScreenHeight) {
    [output writeInt32:8 value:self.screenHeight];
  }
  if (self.hasPlatform) {
    [output writeEnum:9 value:self.platform];
  }
  if (self.hasNeedResize) {
    [output writeBool:10 value:self.needResize];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasMobileNum) {
    size += computeStringSize(1, self.mobileNum);
  }
  if (self.hasImsi) {
    size += computeStringSize(2, self.imsi);
  }
  if (self.hasMobileManufacturer) {
    size += computeStringSize(3, self.mobileManufacturer);
  }
  if (self.hasMobileType) {
    size += computeStringSize(4, self.mobileType);
  }
  if (self.hasJobServerId) {
    size += computeInt32Size(5, self.jobServerId);
  }
  if (self.hasTimestamp) {
    size += computeInt64Size(6, self.timestamp);
  }
  if (self.hasScreenWidth) {
    size += computeInt32Size(7, self.screenWidth);
  }
  if (self.hasScreenHeight) {
    size += computeInt32Size(8, self.screenHeight);
  }
  if (self.hasPlatform) {
    size += computeEnumSize(9, self.platform);
  }
  if (self.hasNeedResize) {
    size += computeBoolSize(10, self.needResize);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (GetSplashRequest*) parseFromData:(NSData*) data {
  return (GetSplashRequest*)[[[GetSplashRequest builder] mergeFromData:data] build];
}
+ (GetSplashRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GetSplashRequest*)[[[GetSplashRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GetSplashRequest*) parseFromInputStream:(NSInputStream*) input {
  return (GetSplashRequest*)[[[GetSplashRequest builder] mergeFromInputStream:input] build];
}
+ (GetSplashRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GetSplashRequest*)[[[GetSplashRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GetSplashRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GetSplashRequest*)[[[GetSplashRequest builder] mergeFromCodedInputStream:input] build];
}
+ (GetSplashRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GetSplashRequest*)[[[GetSplashRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GetSplashRequest_Builder*) builder {
  return [[[GetSplashRequest_Builder alloc] init] autorelease];
}
+ (GetSplashRequest_Builder*) builderWithPrototype:(GetSplashRequest*) prototype {
  return [[GetSplashRequest builder] mergeFrom:prototype];
}
- (GetSplashRequest_Builder*) builder {
  return [GetSplashRequest builder];
}
@end

@interface GetSplashRequest_Builder()
@property (retain) GetSplashRequest* result;
@end

@implementation GetSplashRequest_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[GetSplashRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (GetSplashRequest_Builder*) clear {
  self.result = [[[GetSplashRequest alloc] init] autorelease];
  return self;
}
- (GetSplashRequest_Builder*) clone {
  return [GetSplashRequest builderWithPrototype:result];
}
- (GetSplashRequest*) defaultInstance {
  return [GetSplashRequest defaultInstance];
}
- (GetSplashRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GetSplashRequest*) buildPartial {
  GetSplashRequest* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (GetSplashRequest_Builder*) mergeFrom:(GetSplashRequest*) other {
  if (other == [GetSplashRequest defaultInstance]) {
    return self;
  }
  if (other.hasMobileNum) {
    [self setMobileNum:other.mobileNum];
  }
  if (other.hasImsi) {
    [self setImsi:other.imsi];
  }
  if (other.hasMobileManufacturer) {
    [self setMobileManufacturer:other.mobileManufacturer];
  }
  if (other.hasMobileType) {
    [self setMobileType:other.mobileType];
  }
  if (other.hasJobServerId) {
    [self setJobServerId:other.jobServerId];
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  if (other.hasScreenWidth) {
    [self setScreenWidth:other.screenWidth];
  }
  if (other.hasScreenHeight) {
    [self setScreenHeight:other.screenHeight];
  }
  if (other.hasPlatform) {
    [self setPlatform:other.platform];
  }
  if (other.hasNeedResize) {
    [self setNeedResize:other.needResize];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GetSplashRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GetSplashRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setMobileNum:[input readString]];
        break;
      }
      case 18: {
        [self setImsi:[input readString]];
        break;
      }
      case 26: {
        [self setMobileManufacturer:[input readString]];
        break;
      }
      case 34: {
        [self setMobileType:[input readString]];
        break;
      }
      case 40: {
        [self setJobServerId:[input readInt32]];
        break;
      }
      case 48: {
        [self setTimestamp:[input readInt64]];
        break;
      }
      case 56: {
        [self setScreenWidth:[input readInt32]];
        break;
      }
      case 64: {
        [self setScreenHeight:[input readInt32]];
        break;
      }
      case 72: {
        int32_t value = [input readEnum];
        if (PlatformIsValidValue(value)) {
          [self setPlatform:value];
        } else {
          [unknownFields mergeVarintField:9 value:value];
        }
        break;
      }
      case 80: {
        [self setNeedResize:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasMobileNum {
  return result.hasMobileNum;
}
- (NSString*) mobileNum {
  return result.mobileNum;
}
- (GetSplashRequest_Builder*) setMobileNum:(NSString*) value {
  result.hasMobileNum = YES;
  result.mobileNum = value;
  return self;
}
- (GetSplashRequest_Builder*) clearMobileNum {
  result.hasMobileNum = NO;
  result.mobileNum = @"";
  return self;
}
- (BOOL) hasImsi {
  return result.hasImsi;
}
- (NSString*) imsi {
  return result.imsi;
}
- (GetSplashRequest_Builder*) setImsi:(NSString*) value {
  result.hasImsi = YES;
  result.imsi = value;
  return self;
}
- (GetSplashRequest_Builder*) clearImsi {
  result.hasImsi = NO;
  result.imsi = @"";
  return self;
}
- (BOOL) hasMobileManufacturer {
  return result.hasMobileManufacturer;
}
- (NSString*) mobileManufacturer {
  return result.mobileManufacturer;
}
- (GetSplashRequest_Builder*) setMobileManufacturer:(NSString*) value {
  result.hasMobileManufacturer = YES;
  result.mobileManufacturer = value;
  return self;
}
- (GetSplashRequest_Builder*) clearMobileManufacturer {
  result.hasMobileManufacturer = NO;
  result.mobileManufacturer = @"";
  return self;
}
- (BOOL) hasMobileType {
  return result.hasMobileType;
}
- (NSString*) mobileType {
  return result.mobileType;
}
- (GetSplashRequest_Builder*) setMobileType:(NSString*) value {
  result.hasMobileType = YES;
  result.mobileType = value;
  return self;
}
- (GetSplashRequest_Builder*) clearMobileType {
  result.hasMobileType = NO;
  result.mobileType = @"";
  return self;
}
- (BOOL) hasJobServerId {
  return result.hasJobServerId;
}
- (int32_t) jobServerId {
  return result.jobServerId;
}
- (GetSplashRequest_Builder*) setJobServerId:(int32_t) value {
  result.hasJobServerId = YES;
  result.jobServerId = value;
  return self;
}
- (GetSplashRequest_Builder*) clearJobServerId {
  result.hasJobServerId = NO;
  result.jobServerId = 0;
  return self;
}
- (BOOL) hasTimestamp {
  return result.hasTimestamp;
}
- (int64_t) timestamp {
  return result.timestamp;
}
- (GetSplashRequest_Builder*) setTimestamp:(int64_t) value {
  result.hasTimestamp = YES;
  result.timestamp = value;
  return self;
}
- (GetSplashRequest_Builder*) clearTimestamp {
  result.hasTimestamp = NO;
  result.timestamp = 0L;
  return self;
}
- (BOOL) hasScreenWidth {
  return result.hasScreenWidth;
}
- (int32_t) screenWidth {
  return result.screenWidth;
}
- (GetSplashRequest_Builder*) setScreenWidth:(int32_t) value {
  result.hasScreenWidth = YES;
  result.screenWidth = value;
  return self;
}
- (GetSplashRequest_Builder*) clearScreenWidth {
  result.hasScreenWidth = NO;
  result.screenWidth = 0;
  return self;
}
- (BOOL) hasScreenHeight {
  return result.hasScreenHeight;
}
- (int32_t) screenHeight {
  return result.screenHeight;
}
- (GetSplashRequest_Builder*) setScreenHeight:(int32_t) value {
  result.hasScreenHeight = YES;
  result.screenHeight = value;
  return self;
}
- (GetSplashRequest_Builder*) clearScreenHeight {
  result.hasScreenHeight = NO;
  result.screenHeight = 0;
  return self;
}
- (BOOL) hasPlatform {
  return result.hasPlatform;
}
- (Platform) platform {
  return result.platform;
}
- (GetSplashRequest_Builder*) setPlatform:(Platform) value {
  result.hasPlatform = YES;
  result.platform = value;
  return self;
}
- (GetSplashRequest_Builder*) clearPlatform {
  result.hasPlatform = NO;
  result.platform = PlatformNone;
  return self;
}
- (BOOL) hasNeedResize {
  return result.hasNeedResize;
}
- (BOOL) needResize {
  return result.needResize;
}
- (GetSplashRequest_Builder*) setNeedResize:(BOOL) value {
  result.hasNeedResize = YES;
  result.needResize = value;
  return self;
}
- (GetSplashRequest_Builder*) clearNeedResize {
  result.hasNeedResize = NO;
  result.needResize = NO;
  return self;
}
@end

@interface GetSplashResponse ()
@property int32_t jobServerId;
@property int64_t timestamp;
@property (retain) NSString* startDate;
@property (retain) NSString* endDate;
@property (retain) NSString* backgroundColor;
@property int32_t displayTime;
@property (retain) NSMutableArray* mutableSplashList;
@property int32_t frequency;
@property (retain) NSString* title;
@end

@implementation GetSplashResponse

- (BOOL) hasJobServerId {
  return !!hasJobServerId_;
}
- (void) setHasJobServerId:(BOOL) value {
  hasJobServerId_ = !!value;
}
@synthesize jobServerId;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) value {
  hasTimestamp_ = !!value;
}
@synthesize timestamp;
- (BOOL) hasStartDate {
  return !!hasStartDate_;
}
- (void) setHasStartDate:(BOOL) value {
  hasStartDate_ = !!value;
}
@synthesize startDate;
- (BOOL) hasEndDate {
  return !!hasEndDate_;
}
- (void) setHasEndDate:(BOOL) value {
  hasEndDate_ = !!value;
}
@synthesize endDate;
- (BOOL) hasBackgroundColor {
  return !!hasBackgroundColor_;
}
- (void) setHasBackgroundColor:(BOOL) value {
  hasBackgroundColor_ = !!value;
}
@synthesize backgroundColor;
- (BOOL) hasDisplayTime {
  return !!hasDisplayTime_;
}
- (void) setHasDisplayTime:(BOOL) value {
  hasDisplayTime_ = !!value;
}
@synthesize displayTime;
@synthesize mutableSplashList;
- (BOOL) hasFrequency {
  return !!hasFrequency_;
}
- (void) setHasFrequency:(BOOL) value {
  hasFrequency_ = !!value;
}
@synthesize frequency;
- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) value {
  hasTitle_ = !!value;
}
@synthesize title;
- (void) dealloc {
  self.startDate = nil;
  self.endDate = nil;
  self.backgroundColor = nil;
  self.mutableSplashList = nil;
  self.title = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.jobServerId = 0;
    self.timestamp = 0L;
    self.startDate = @"";
    self.endDate = @"";
    self.backgroundColor = @"";
    self.displayTime = 0;
    self.frequency = 0;
    self.title = @"";
  }
  return self;
}
static GetSplashResponse* defaultGetSplashResponseInstance = nil;
+ (void) initialize {
  if (self == [GetSplashResponse class]) {
    defaultGetSplashResponseInstance = [[GetSplashResponse alloc] init];
  }
}
+ (GetSplashResponse*) defaultInstance {
  return defaultGetSplashResponseInstance;
}
- (GetSplashResponse*) defaultInstance {
  return defaultGetSplashResponseInstance;
}
- (NSArray*) splashList {
  return mutableSplashList;
}
- (Splash*) splashAtIndex:(int32_t) index {
  id value = [mutableSplashList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (Splash* element in self.splashList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasJobServerId) {
    [output writeInt32:1 value:self.jobServerId];
  }
  if (self.hasTimestamp) {
    [output writeInt64:2 value:self.timestamp];
  }
  if (self.hasStartDate) {
    [output writeString:3 value:self.startDate];
  }
  if (self.hasEndDate) {
    [output writeString:4 value:self.endDate];
  }
  if (self.hasBackgroundColor) {
    [output writeString:5 value:self.backgroundColor];
  }
  if (self.hasDisplayTime) {
    [output writeInt32:6 value:self.displayTime];
  }
  for (Splash* element in self.splashList) {
    [output writeMessage:7 value:element];
  }
  if (self.hasFrequency) {
    [output writeInt32:8 value:self.frequency];
  }
  if (self.hasTitle) {
    [output writeString:9 value:self.title];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasJobServerId) {
    size += computeInt32Size(1, self.jobServerId);
  }
  if (self.hasTimestamp) {
    size += computeInt64Size(2, self.timestamp);
  }
  if (self.hasStartDate) {
    size += computeStringSize(3, self.startDate);
  }
  if (self.hasEndDate) {
    size += computeStringSize(4, self.endDate);
  }
  if (self.hasBackgroundColor) {
    size += computeStringSize(5, self.backgroundColor);
  }
  if (self.hasDisplayTime) {
    size += computeInt32Size(6, self.displayTime);
  }
  for (Splash* element in self.splashList) {
    size += computeMessageSize(7, element);
  }
  if (self.hasFrequency) {
    size += computeInt32Size(8, self.frequency);
  }
  if (self.hasTitle) {
    size += computeStringSize(9, self.title);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (GetSplashResponse*) parseFromData:(NSData*) data {
  return (GetSplashResponse*)[[[GetSplashResponse builder] mergeFromData:data] build];
}
+ (GetSplashResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GetSplashResponse*)[[[GetSplashResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GetSplashResponse*) parseFromInputStream:(NSInputStream*) input {
  return (GetSplashResponse*)[[[GetSplashResponse builder] mergeFromInputStream:input] build];
}
+ (GetSplashResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GetSplashResponse*)[[[GetSplashResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GetSplashResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GetSplashResponse*)[[[GetSplashResponse builder] mergeFromCodedInputStream:input] build];
}
+ (GetSplashResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GetSplashResponse*)[[[GetSplashResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GetSplashResponse_Builder*) builder {
  return [[[GetSplashResponse_Builder alloc] init] autorelease];
}
+ (GetSplashResponse_Builder*) builderWithPrototype:(GetSplashResponse*) prototype {
  return [[GetSplashResponse builder] mergeFrom:prototype];
}
- (GetSplashResponse_Builder*) builder {
  return [GetSplashResponse builder];
}
@end

@interface GetSplashResponse_Builder()
@property (retain) GetSplashResponse* result;
@end

@implementation GetSplashResponse_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[GetSplashResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (GetSplashResponse_Builder*) clear {
  self.result = [[[GetSplashResponse alloc] init] autorelease];
  return self;
}
- (GetSplashResponse_Builder*) clone {
  return [GetSplashResponse builderWithPrototype:result];
}
- (GetSplashResponse*) defaultInstance {
  return [GetSplashResponse defaultInstance];
}
- (GetSplashResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GetSplashResponse*) buildPartial {
  GetSplashResponse* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (GetSplashResponse_Builder*) mergeFrom:(GetSplashResponse*) other {
  if (other == [GetSplashResponse defaultInstance]) {
    return self;
  }
  if (other.hasJobServerId) {
    [self setJobServerId:other.jobServerId];
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  if (other.hasStartDate) {
    [self setStartDate:other.startDate];
  }
  if (other.hasEndDate) {
    [self setEndDate:other.endDate];
  }
  if (other.hasBackgroundColor) {
    [self setBackgroundColor:other.backgroundColor];
  }
  if (other.hasDisplayTime) {
    [self setDisplayTime:other.displayTime];
  }
  if (other.mutableSplashList.count > 0) {
    if (result.mutableSplashList == nil) {
      result.mutableSplashList = [NSMutableArray array];
    }
    [result.mutableSplashList addObjectsFromArray:other.mutableSplashList];
  }
  if (other.hasFrequency) {
    [self setFrequency:other.frequency];
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GetSplashResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GetSplashResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setJobServerId:[input readInt32]];
        break;
      }
      case 16: {
        [self setTimestamp:[input readInt64]];
        break;
      }
      case 26: {
        [self setStartDate:[input readString]];
        break;
      }
      case 34: {
        [self setEndDate:[input readString]];
        break;
      }
      case 42: {
        [self setBackgroundColor:[input readString]];
        break;
      }
      case 48: {
        [self setDisplayTime:[input readInt32]];
        break;
      }
      case 58: {
        Splash_Builder* subBuilder = [Splash builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSplash:[subBuilder buildPartial]];
        break;
      }
      case 64: {
        [self setFrequency:[input readInt32]];
        break;
      }
      case 74: {
        [self setTitle:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasJobServerId {
  return result.hasJobServerId;
}
- (int32_t) jobServerId {
  return result.jobServerId;
}
- (GetSplashResponse_Builder*) setJobServerId:(int32_t) value {
  result.hasJobServerId = YES;
  result.jobServerId = value;
  return self;
}
- (GetSplashResponse_Builder*) clearJobServerId {
  result.hasJobServerId = NO;
  result.jobServerId = 0;
  return self;
}
- (BOOL) hasTimestamp {
  return result.hasTimestamp;
}
- (int64_t) timestamp {
  return result.timestamp;
}
- (GetSplashResponse_Builder*) setTimestamp:(int64_t) value {
  result.hasTimestamp = YES;
  result.timestamp = value;
  return self;
}
- (GetSplashResponse_Builder*) clearTimestamp {
  result.hasTimestamp = NO;
  result.timestamp = 0L;
  return self;
}
- (BOOL) hasStartDate {
  return result.hasStartDate;
}
- (NSString*) startDate {
  return result.startDate;
}
- (GetSplashResponse_Builder*) setStartDate:(NSString*) value {
  result.hasStartDate = YES;
  result.startDate = value;
  return self;
}
- (GetSplashResponse_Builder*) clearStartDate {
  result.hasStartDate = NO;
  result.startDate = @"";
  return self;
}
- (BOOL) hasEndDate {
  return result.hasEndDate;
}
- (NSString*) endDate {
  return result.endDate;
}
- (GetSplashResponse_Builder*) setEndDate:(NSString*) value {
  result.hasEndDate = YES;
  result.endDate = value;
  return self;
}
- (GetSplashResponse_Builder*) clearEndDate {
  result.hasEndDate = NO;
  result.endDate = @"";
  return self;
}
- (BOOL) hasBackgroundColor {
  return result.hasBackgroundColor;
}
- (NSString*) backgroundColor {
  return result.backgroundColor;
}
- (GetSplashResponse_Builder*) setBackgroundColor:(NSString*) value {
  result.hasBackgroundColor = YES;
  result.backgroundColor = value;
  return self;
}
- (GetSplashResponse_Builder*) clearBackgroundColor {
  result.hasBackgroundColor = NO;
  result.backgroundColor = @"";
  return self;
}
- (BOOL) hasDisplayTime {
  return result.hasDisplayTime;
}
- (int32_t) displayTime {
  return result.displayTime;
}
- (GetSplashResponse_Builder*) setDisplayTime:(int32_t) value {
  result.hasDisplayTime = YES;
  result.displayTime = value;
  return self;
}
- (GetSplashResponse_Builder*) clearDisplayTime {
  result.hasDisplayTime = NO;
  result.displayTime = 0;
  return self;
}
- (NSArray*) splashList {
  if (result.mutableSplashList == nil) { return [NSArray array]; }
  return result.mutableSplashList;
}
- (Splash*) splashAtIndex:(int32_t) index {
  return [result splashAtIndex:index];
}
- (GetSplashResponse_Builder*) replaceSplashAtIndex:(int32_t) index with:(Splash*) value {
  [result.mutableSplashList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (GetSplashResponse_Builder*) addAllSplash:(NSArray*) values {
  if (result.mutableSplashList == nil) {
    result.mutableSplashList = [NSMutableArray array];
  }
  [result.mutableSplashList addObjectsFromArray:values];
  return self;
}
- (GetSplashResponse_Builder*) clearSplashList {
  result.mutableSplashList = nil;
  return self;
}
- (GetSplashResponse_Builder*) addSplash:(Splash*) value {
  if (result.mutableSplashList == nil) {
    result.mutableSplashList = [NSMutableArray array];
  }
  [result.mutableSplashList addObject:value];
  return self;
}
- (BOOL) hasFrequency {
  return result.hasFrequency;
}
- (int32_t) frequency {
  return result.frequency;
}
- (GetSplashResponse_Builder*) setFrequency:(int32_t) value {
  result.hasFrequency = YES;
  result.frequency = value;
  return self;
}
- (GetSplashResponse_Builder*) clearFrequency {
  result.hasFrequency = NO;
  result.frequency = 0;
  return self;
}
- (BOOL) hasTitle {
  return result.hasTitle;
}
- (NSString*) title {
  return result.title;
}
- (GetSplashResponse_Builder*) setTitle:(NSString*) value {
  result.hasTitle = YES;
  result.title = value;
  return self;
}
- (GetSplashResponse_Builder*) clearTitle {
  result.hasTitle = NO;
  result.title = @"";
  return self;
}
@end

