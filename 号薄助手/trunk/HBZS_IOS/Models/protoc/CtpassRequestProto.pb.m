// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "CtpassRequestProto.pb.h"

@implementation CtpassRequestProtoRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [CtpassRequestProtoRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface CTPassRequest ()
@property (retain) NSString* mdn;
@property (retain) NSString* seqId;
@property (retain) NSString* random;
@end

@implementation CTPassRequest

- (BOOL) hasMdn {
  return !!hasMdn_;
}
- (void) setHasMdn:(BOOL) value {
  hasMdn_ = !!value;
}
@synthesize mdn;
- (BOOL) hasSeqId {
  return !!hasSeqId_;
}
- (void) setHasSeqId:(BOOL) value {
  hasSeqId_ = !!value;
}
@synthesize seqId;
- (BOOL) hasRandom {
  return !!hasRandom_;
}
- (void) setHasRandom:(BOOL) value {
  hasRandom_ = !!value;
}
@synthesize random;
- (void) dealloc {
  self.mdn = nil;
  self.seqId = nil;
  self.random = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.mdn = @"";
    self.seqId = @"";
    self.random = @"";
  }
  return self;
}
static CTPassRequest* defaultCTPassRequestInstance = nil;
+ (void) initialize {
  if (self == [CTPassRequest class]) {
    defaultCTPassRequestInstance = [[CTPassRequest alloc] init];
  }
}
+ (CTPassRequest*) defaultInstance {
  return defaultCTPassRequestInstance;
}
- (CTPassRequest*) defaultInstance {
  return defaultCTPassRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasMdn) {
    return NO;
  }
  if (!self.hasSeqId) {
    return NO;
  }
  if (!self.hasRandom) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMdn) {
    [output writeString:1 value:self.mdn];
  }
  if (self.hasSeqId) {
    [output writeString:2 value:self.seqId];
  }
  if (self.hasRandom) {
    [output writeString:3 value:self.random];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasMdn) {
    size += computeStringSize(1, self.mdn);
  }
  if (self.hasSeqId) {
    size += computeStringSize(2, self.seqId);
  }
  if (self.hasRandom) {
    size += computeStringSize(3, self.random);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (CTPassRequest*) parseFromData:(NSData*) data {
  return (CTPassRequest*)[[[CTPassRequest builder] mergeFromData:data] build];
}
+ (CTPassRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CTPassRequest*)[[[CTPassRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CTPassRequest*) parseFromInputStream:(NSInputStream*) input {
  return (CTPassRequest*)[[[CTPassRequest builder] mergeFromInputStream:input] build];
}
+ (CTPassRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CTPassRequest*)[[[CTPassRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CTPassRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CTPassRequest*)[[[CTPassRequest builder] mergeFromCodedInputStream:input] build];
}
+ (CTPassRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CTPassRequest*)[[[CTPassRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CTPassRequest_Builder*) builder {
  return [[[CTPassRequest_Builder alloc] init] autorelease];
}
+ (CTPassRequest_Builder*) builderWithPrototype:(CTPassRequest*) prototype {
  return [[CTPassRequest builder] mergeFrom:prototype];
}
- (CTPassRequest_Builder*) builder {
  return [CTPassRequest builder];
}
@end

@interface CTPassRequest_Builder()
@property (retain) CTPassRequest* result;
@end

@implementation CTPassRequest_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[CTPassRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CTPassRequest_Builder*) clear {
  self.result = [[[CTPassRequest alloc] init] autorelease];
  return self;
}
- (CTPassRequest_Builder*) clone {
  return [CTPassRequest builderWithPrototype:result];
}
- (CTPassRequest*) defaultInstance {
  return [CTPassRequest defaultInstance];
}
- (CTPassRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CTPassRequest*) buildPartial {
  CTPassRequest* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (CTPassRequest_Builder*) mergeFrom:(CTPassRequest*) other {
  if (other == [CTPassRequest defaultInstance]) {
    return self;
  }
  if (other.hasMdn) {
    [self setMdn:other.mdn];
  }
  if (other.hasSeqId) {
    [self setSeqId:other.seqId];
  }
  if (other.hasRandom) {
    [self setRandom:other.random];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CTPassRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CTPassRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setMdn:[input readString]];
        break;
      }
      case 18: {
        [self setSeqId:[input readString]];
        break;
      }
      case 26: {
        [self setRandom:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasMdn {
  return result.hasMdn;
}
- (NSString*) mdn {
  return result.mdn;
}
- (CTPassRequest_Builder*) setMdn:(NSString*) value {
  result.hasMdn = YES;
  result.mdn = value;
  return self;
}
- (CTPassRequest_Builder*) clearMdn {
  result.hasMdn = NO;
  result.mdn = @"";
  return self;
}
- (BOOL) hasSeqId {
  return result.hasSeqId;
}
- (NSString*) seqId {
  return result.seqId;
}
- (CTPassRequest_Builder*) setSeqId:(NSString*) value {
  result.hasSeqId = YES;
  result.seqId = value;
  return self;
}
- (CTPassRequest_Builder*) clearSeqId {
  result.hasSeqId = NO;
  result.seqId = @"";
  return self;
}
- (BOOL) hasRandom {
  return result.hasRandom;
}
- (NSString*) random {
  return result.random;
}
- (CTPassRequest_Builder*) setRandom:(NSString*) value {
  result.hasRandom = YES;
  result.random = value;
  return self;
}
- (CTPassRequest_Builder*) clearRandom {
  result.hasRandom = NO;
  result.random = @"";
  return self;
}
@end

